name: Room Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'room-service/**'
      - '.github/workflows/room-service.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'room-service/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        cd room-service
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        
    - name: Test with pytest and generate coverage
      run: |
        cd room-service
        pytest --cov=app --cov-report=xml:coverage.xml --junitxml=test-results.xml
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: room-service

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/meeting-room-room-service
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./room-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/meeting-room-room-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/meeting-room-room-service:buildcache,mode=max
          
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Update helm chart values
        env:
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          sed -i "s|roomService.image.tag:.*|roomService.image.tag: \"$IMAGE_TAG\"|g" helm/meeting-room-app/values.yaml
          
      - name: Deploy with Helm
        run: |
          helm upgrade --install meeting-room-app ./helm/meeting-room-app \
            --namespace meeting-room \
            --create-namespace \
            --set roomService.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/meeting-room-room-service \
            --set roomService.image.tag=sha-${{ github.sha }} \
            --set dbSecrets.roomDbPassword=${{ secrets.ROOM_DB_PASSWORD }} \
            --set jwtSecret=${{ secrets.JWT_SECRET_KEY }} \
            --set monitoring.enabled=true \
            --set monitoring.aws.region=${{ secrets.AWS_REGION }} \
            --set monitoring.aws.accessKey=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --set monitoring.aws.secretKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --set monitoring.grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }}