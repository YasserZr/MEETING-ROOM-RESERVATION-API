{{- if .Values.kafka.enabled }}
# Zookeeper Deployment and Service
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.kafka.zookeeper.name }}-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.kafka.zookeeper.persistence.size }}
  storageClassName: {{ .Values.kafka.zookeeper.persistence.storageClass }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.zookeeper.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.kafka.zookeeper.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.zookeeper.name }}
    spec:
      containers:
      - name: {{ .Values.kafka.zookeeper.name }}
        image: {{ .Values.kafka.zookeeper.image }}
        ports:
        - containerPort: {{ .Values.kafka.zookeeper.port }}
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "{{ .Values.kafka.zookeeper.port }}"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          limits:
            cpu: {{ .Values.kafka.zookeeper.resources.limits.cpu }}
            memory: {{ .Values.kafka.zookeeper.resources.limits.memory }}
          requests:
            cpu: {{ .Values.kafka.zookeeper.resources.requests.cpu }}
            memory: {{ .Values.kafka.zookeeper.resources.requests.memory }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/zookeeper/data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.kafka.zookeeper.name }}-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafka.zookeeper.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: {{ .Values.kafka.zookeeper.name }}
  ports:
  - port: {{ .Values.kafka.zookeeper.port }}
    targetPort: {{ .Values.kafka.zookeeper.port }}
  type: ClusterIP

# Kafka Deployment and Service
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.kafka.name }}-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.kafka.persistence.size }}
  storageClassName: {{ .Values.kafka.persistence.storageClass }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.kafka.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.name }}
    spec:
      containers:
      - name: {{ .Values.kafka.name }}
        image: {{ .Values.kafka.image }}
        ports:
        - containerPort: {{ .Values.kafka.port }}
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ .Values.kafka.zookeeper.name }}:{{ .Values.kafka.zookeeper.port }}"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://{{ .Values.kafka.name }}:{{ .Values.kafka.port }}"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        resources:
          limits:
            cpu: {{ .Values.kafka.resources.limits.cpu }}
            memory: {{ .Values.kafka.resources.limits.memory }}
          requests:
            cpu: {{ .Values.kafka.resources.requests.cpu }}
            memory: {{ .Values.kafka.resources.requests.memory }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/kafka/data
        livenessProbe:
          tcpSocket:
            port: {{ .Values.kafka.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: {{ .Values.kafka.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.kafka.name }}-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: {{ .Values.kafka.name }}
  ports:
  - port: {{ .Values.kafka.port }}
    targetPort: {{ .Values.kafka.port }}
  type: ClusterIP
{{- end }}