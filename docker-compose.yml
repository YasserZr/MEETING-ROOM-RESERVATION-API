services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Use a specific version
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Use a specific version matching Zookeeper
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      # Expose Kafka broker for external access if needed (e.g., local development tools)
      # Use a different host port if 9092 is taken
      - "9092:9092"
      # Port for internal Docker network communication
      # - "29092:29092" # Not strictly needed if using PLAINTEXT within docker network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Listen on 9092 for internal Docker network traffic
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT #,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 #,PLAINTEXT_HOST://localhost:9092 # Use kafka service name internally
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Development setting
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Development setting
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # Enable for convenience in dev, disable in prod
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s # Give Kafka more time to start

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "5000:5000"
    # Use env_file to load all variables from .env by default
    env_file:
      - .env
    # Explicitly set variables needed by the container, potentially overriding .env
    environment:
      # Ensure DATABASE_URL is set correctly for the container environment
      # It should point to the 'user-db' service name.
      # Make sure this is defined in your .env file or uncomment/set it here.
      # Example: DATABASE_URL=postgresql://postgres:postgres@user-db:5432/users_db
      - DATABASE_URL=${DATABASE_URL}
      # Ensure these are loaded from .env via env_file or set here
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      # Kafka Config for Consumer
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Internal service name
      - KAFKA_RESERVATIONS_TOPIC=${KAFKA_RESERVATIONS_TOPIC:-reservations-topic}
      # --- FIX: Uncomment this for development OAuth over HTTP ---
      - OAUTHLIB_INSECURE_TRANSPORT=1
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./user-service:/app # Mount local code for development
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  room-service:
    build: ./room-service
    container_name: room-service
    ports:
      - "5001:5001"
    env_file: # Load common variables
      - .env
    environment:
      # Ensure DATABASE_URL points to room-db service
      # Example: DATABASE_URL=postgresql://postgres:postgres@room-db:5432/rooms_db
      - DATABASE_URL=${DATABASE_URL_ROOM:-postgresql://postgres:postgres@room-db:5432/rooms_db} # Use specific var or default
      - JWT_SECRET_KEY=${JWT_SECRET_KEY} # Loaded from .env
      - SECRET_KEY=${SECRET_KEY_ROOM:-${SECRET_KEY}} # Use specific var or fallback to main SECRET_KEY
      - USER_SERVICE_URL=http://user-service:5000
    depends_on:
      room-db:
        condition: service_healthy
      user-service:
        condition: service_healthy
    volumes:
      - ./room-service:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5001"] # Use flask run command
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    ports:
      - "5002:5002"
    env_file: # Load common variables
      - .env
    environment:
      # Ensure DATABASE_URL points to reservation-db service
      # Example: DATABASE_URL=postgresql://postgres:postgres@reservation-db:5432/reservations_db
      - DATABASE_URL=${DATABASE_URL_RESERVATION:-postgresql://postgres:postgres@reservation-db:5432/reservations_db} # Use specific var or default
      - JWT_SECRET_KEY=${JWT_SECRET_KEY} # Loaded from .env
      - SECRET_KEY=${SECRET_KEY_RESERVATION:-${SECRET_KEY}} # Use specific var or fallback to main SECRET_KEY
      - USER_SERVICE_URL=http://user-service:5000
      - ROOM_SERVICE_URL=http://room-service:5001
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Internal service name
      - KAFKA_RESERVATIONS_TOPIC=${KAFKA_RESERVATIONS_TOPIC:-reservations-topic}
    depends_on:
      reservation-db:
        condition: service_healthy
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./reservation-service:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5002"] # Use flask run command
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5002/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  user-db:
    image: postgres:13
    container_name: postgres-userdb
    restart: always
    environment:
      # Use variables from .env or provide defaults
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_USER:-users_db}
    ports:
      - "5440:5432"
    volumes:
      - user-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB_USER:-users_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  room-db:
    image: postgres:13
    container_name: postgres-roomdb
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_ROOM:-rooms_db}
    ports:
      - "5441:5432"
    volumes:
      - room-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB_ROOM:-rooms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  reservation-db:
    image: postgres:13
    container_name: postgres-reservationdb
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_RESERVATION:-reservations_db}
    ports:
      - "5442:5432"
    volumes:
      - reservation-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB_RESERVATION:-reservations_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  user-pgdata:
  room-pgdata:
  reservation-pgdata:
  # zookeeper-data:
  # zookeeper-log:
  # kafka-data:
