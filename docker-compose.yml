version: '3.9'

services:
  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  # User DB
  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user-db-data:/var/lib/postgresql/data

  # Room DB
  room-db:
    image: postgres:15
    container_name: room-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rooms_db
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - room-db-data:/var/lib/postgresql/data

  # Reservation DB
  reservation-db:
    image: postgres:15
    container_name: reservation-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reservations_db
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - reservation-db-data:/var/lib/postgresql/data

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL_USER:-postgresql://postgres:postgres@user-db:5432/users_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY_USER:-${SECRET_KEY}}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_USERS_TOPIC=${KAFKA_USERS_TOPIC:-users-topic}
      - KAFKA_CONSUMER_GROUP=user-service-group
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./user-service:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5000"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Room Service
  room-service:
    build: ./room-service
    container_name: room-service
    ports:
      - "5001:5001"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL_ROOM:-postgresql://postgres:postgres@room-db:5432/rooms_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY_ROOM:-${SECRET_KEY}}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_ROOMS_TOPIC=${KAFKA_ROOMS_TOPIC:-rooms-topic}
    depends_on:
      room-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./room-service:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5001"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Reservation Service
  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    ports:
      - "5002:5002"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL_RESERVATION:-postgresql://postgres:postgres@reservation-db:5432/reservations_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY_RESERVATION:-${SECRET_KEY}}
      - USER_SERVICE_URL=http://user-service:5000
      - ROOM_SERVICE_URL=http://room-service:5001
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_RESERVATIONS_TOPIC=${KAFKA_RESERVATIONS_TOPIC:-reservations-topic}
    depends_on:
      reservation-db:
        condition: service_healthy
      user-service:
        condition: service_healthy
      room-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./reservation-service:/app
    command: ["flask", "run", "--host=0.0.0.0", "--port=5002"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5002/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  user-db-data:
  room-db-data:
  reservation-db-data:
