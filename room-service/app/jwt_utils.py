import jwt
from datetime import datetime, timedelta
from flask import current_app, jsonify # Added jsonify
from functools import wraps # Added wraps
import requests # Added requests
import os # Added os

# Function to fetch user details from user-service
def get_user_details(user_id, token):
    user_service_url = os.getenv("USER_SERVICE_URL", "http://user-service:5000")
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(f"{user_service_url}/users/me", headers=headers)
        response.raise_for_status() # Raise an exception for bad status codes
        return response.json()
    except requests.exceptions.RequestException as e:
        current_app.logger.error(f"Failed to fetch user details from user-service: {e}")
        return None

def generate_token(user_id):
    # Note: Room service typically wouldn't generate tokens, but included for completeness if needed.
    # Usually relies on tokens generated by the user/auth service.
    payload = {
        "sub": user_id,
        "exp": datetime.utcnow() + timedelta(hours=2) # Consider token lifespan
    }
    token = jwt.encode(payload, current_app.config['JWT_SECRET_KEY'], algorithm='HS256')
    return token

def decode_token(token):
    try:
        payload = jwt.decode(token, current_app.config['JWT_SECRET_KEY'], algorithms=['HS256'])
        return payload['sub'] # Return user_id
    except jwt.ExpiredSignatureError:
        current_app.logger.warning("Token expired.")
        return None
    except jwt.InvalidTokenError:
        current_app.logger.warning("Invalid token.")
        return None

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        auth_header = request.headers.get("Authorization")
        if auth_header:
            try:
                token = auth_header.split(" ")[1]
            except IndexError:
                return jsonify({"message": "Bearer token malformed"}), 401

        if not token:
            return jsonify({"message": "Token is missing"}), 401

        user_id = decode_token(token)
        if not user_id:
            return jsonify({"message": "Token is invalid or expired"}), 401

        # Pass the user_id obtained from the token to the decorated function
        # Also pass the original token for potential inter-service calls
        return f(user_id, token, *args, **kwargs)

    return decorated

def admin_required(f):
    @wraps(f)
    @token_required # Ensures token is valid first
    def decorated(user_id, token, *args, **kwargs):
        # Fetch user details from user-service to check role
        user_details = get_user_details(user_id, token)

        if not user_details:
            return jsonify({"message": "Could not fetch user details"}), 500

        if user_details.get('role') != 'admin':
            return jsonify({"message": "Admin privileges required"}), 403

        # Pass user_id and token like token_required does
        return f(user_id, token, *args, **kwargs)
    return decorated
